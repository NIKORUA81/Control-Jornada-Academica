// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  username  String   @unique
  fullName  String
  password  String   @db.VarChar(255)
  role      Role     @default(DOCENTE)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  schedules       Schedule[]
  createdImports  BulkImport[] @relation("ImportedBy")

  @@map("users")
}

model Schedule {
  id                 String         @id @default(uuid())
  fecha              DateTime       @db.Date
  hora_inicio        String
  hora_fin           String
  modalidad          Modality       @default(PRESENCIAL)
  aula               String?
  estado             ScheduleStatus @default(PROGRAMADO)
  cumplido           Boolean        @default(false)
  fecha_cumplimiento DateTime?
  observaciones      String?        @db.Text
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  teacher   User   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId String

  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId String

  group     Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String

  @@map("schedules")
}

model Subject {
  id          String   @id @default(uuid())
  code        String   @unique
  name        String
  credits     Int
  description String?  @db.Text
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relación Muchos a Muchos: Una materia puede estar en muchos grupos
  groups    Group[]
  schedules Schedule[]

  @@map("subjects")
}

model Group {
  id           String   @id @default(uuid())
  code         String   @unique
  name         String
  semester     Int
  year         Int
  max_students Int      @default(30)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relación Muchos a Muchos: Un grupo puede tener muchas materias
  subjects  Subject[]
  schedules Schedule[]

  @@map("groups")
}

model BulkImport {
  id                String   @id @default(uuid())
  importType        String
  fileName          String
  status            String   @default("pending")
  totalRecords      Int      @default(0)
  successfulRecords Int      @default(0)
  failedRecords     Int      @default(0)
  createdAt         DateTime @default(now())
  completedAt       DateTime?

  importedBy   User   @relation("ImportedBy", fields: [importedById], references: [id])
  importedById String

  @@map("bulk_imports")
}

enum Role {
  SUPERADMIN
  ADMIN
  DIRECTOR
  COORDINADOR
  ASISTENTE
  DOCENTE
}

enum Modality {
  PRESENCIAL
  VIRTUAL
  HIBRIDA
}

enum ScheduleStatus {
  PROGRAMADO
  EN_CURSO
  COMPLETADO
  CANCELADO
}